;
;  Copyright (c) 2020, Texas Instruments Incorporated
;  All rights reserved.
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
;
; ======== SysCall_asm.sv7R ========
;

        .cdecls C,NOLIST,"SysCall_asm.h"

        .thumb

        .global _kernel_wrapper_funcs_begin
        .global _kernel_wrapper_funcs_end
        .global ti_sysbios_family_arm_v7r_SysCall_enterPrivModeI__I
        .global ti_sysbios_family_arm_v7r_SysCall_enterUnprivModeI__I
        .global ti_sysbios_family_arm_v7r_SysCall_restorePrivModeI__I
        .global ti_sysbios_family_arm_v7r_SysCall_svcHandler__I

ti_sysbios_family_arm_v7r_SysCall_Module__state__V .tag ti_sysbios_family_arm_v7r_SysCall_Module_State
ti_sysbios_knl_Task_Module__state__V .tag ti_sysbios_knl_Task_Module_State

        .sect ".text:ti_sysbios_family_arm_v7r_SysCall_svcHandler__I"
ti_sysbios_family_arm_v7r_SysCall_svcHandler__I:
        .asmfunc
        ; SVC interrupt cannot be nested and we don't have to worry
        ; about stack issues.
        push    {r0, r1}
        mov     r1, lr
        mrs     r0, spsr
        tst     r0, #0x20      ; test for thumb mode
        ite     eq
        subeq   r0, r1, #4     ; gives SVC instruction in ARM mode
        subne   r0, r1, #2     ; gives SVC instruction in thumb mode

        ; Check if PC within kernel wrapper function code region
        ; If not, return without doing anything
        ldr     r1, kernel_wrapper_begin
        cmp     r0, r1
        it      LO
        blo     validationFailed
        ldr     r1, kernel_wrapper_end
        cmp     r0, r1
        it      HI
        bhi     validationFailed

        ldr     r0, [r0]        ; read svc instruction op code
        and     r0, r0, #0xff
        lsl     r0, r0, #2
        ldr     r1, sysCallTable
        ldr     r1, [r1]
        ldr     r0, [r1, r0]
        push    {r0, lr}
        blx     r0              ; jump to svc function
        pop     {r0, lr}
        pop     {r0, r1}
        movs    pc, lr
validationFailed:
        movw    r1, ti_sysbios_family_arm_v7r_SysCall_requestFailedFunc__C
        movt    r1, ti_sysbios_family_arm_v7r_SysCall_requestFailedFunc__C
        ldr     r1, [r1]
        ldr     r0, [r0]        ; read svc instruction op code
        and     r0, r0, #0xff
        push    {r0, lr}
        blx     r1
        pop     {r0, lr}
        pop     {r0, r1}
        movs    pc, lr
sysCallTable:
        .word   ti_sysbios_family_arm_v7r_SysCall_Module__state__V.sysCallTable
kernel_wrapper_begin:
        .word   _kernel_wrapper_funcs_begin
kernel_wrapper_end:
        .word   _kernel_wrapper_funcs_end
        .endasmfunc

        .sect ".text:ti_sysbios_family_arm_v7r_SysCall_enterPrivModeI__I"
ti_sysbios_family_arm_v7r_SysCall_enterPrivModeI__I:
        .asmfunc
        mrs     r0, spsr
        orr     r1, r0, #0x1F
        msr     spsr_c, r1
        isb
        bx      lr
        .endasmfunc

        .sect ".text:ti_sysbios_family_arm_v7r_SysCall_enterUnprivModeI__I"
ti_sysbios_family_arm_v7r_SysCall_enterUnprivModeI__I:
        .asmfunc
        mrs     r0, spsr
        bic     r0, r0, #0x1F
        orr     r0, r0, #0x10
        msr     spsr_c, r0
        isb
        bx      lr
        .endasmfunc

        .sect ".text:ti_sysbios_family_arm_v7r_SysCall_restorePrivModeI__I"
ti_sysbios_family_arm_v7r_SysCall_restorePrivModeI__I:
        .asmfunc
        ldr     r0, curTaskPrivileged
        ldrb    r0, [r0]
        cmp     r0, #1
        ite     eq
        moveq   r0, #0x1F
        movne   r0, #0x10
        mrs     r1, spsr
        bic     r1, r1, #0x1F
        orr     r1, r1, r0
        msr     spsr_c, r1
        isb
        bx      lr
curTaskPrivileged:
        .word   ti_sysbios_knl_Task_Module__state__V.curTaskPrivileged
        .endasmfunc

        .end
